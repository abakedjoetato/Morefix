
<plan-start>Fix Plan: Command Pipeline Integrity Audit & Refactor (Rules.md Compliant)

Module Scope:

commands/

handlers/command_dispatcher.py

db/mongo_interface.py

subsystems/premium_logic.py



---

[1] Full Audit Phase (Required Before Any Fixes â€“ Rule #1)

Goal: Perform an exhaustive trace of each command's invocation-to-execution pipeline.
Checklist:

[ ] Trace command registration (decorators or Pycord route mapping).

[ ] Validate parser input/output per command.

[ ] Confirm database reads/writes (CRUD actions) with typed, schema-safe operations.

[ ] Cross-check middleware, premium checks, and permission gates.


Deliverable: Command Trace Matrix (per command name), outlining all execution steps and their function calls.


---

[2] MongoDB Compatibility Fixes

Problem: Use of Pythonic truthiness in MongoDB queries and dict structures may lead to silent failures.
Action Items:

[ ] Replace ambiguous checks like if dict: with explicit schema key validation.

[ ] Ensure .find() and .find_one() use complete and type-safe filters.

[ ] Audit all $set, $inc, $unset operations for malformed updates.

[ ] Validate indexes used in queries to confirm efficiency.


Deliverable: Patched query logic with tests confirming correctness on null/empty/bool-false states.


---

[3] Dict Access & State Integrity

Problem: Unsafe dictionary handling may cause runtime errors or missing state propagation.
Action Items:

[ ] Refactor any direct key access (dict[key]) to safe access (dict.get(key) with fallback).

[ ] Flatten nested structures if improperly normalized.

[ ] Confirm all stateful dict objects (e.g., session, guild config, premium flags) have defaults declared at creation.


Deliverable: Dictionary-safe logic with zero runtime KeyError risk and full state consistency.


---

[4] Command Behavior Lock-In

Problem: Fixes must not alter command output or behavior (Rule #3).
Action Items:

[ ] Snapshot expected input/output examples for each command.

[ ] Write test cases to enforce behavior integrity.

[ ] Document any refactor that replicates exact behavior while fixing bugs.


Deliverable: Behavior-mirroring fix implementations backed by non-regression tests.


---

[5] Premium System and Multi-Guild Isolation

Problem: Command behavior must not assume a single guild context. Premium logic must be guild-scoped only.
Action Items:

[ ] Validate all premium checks use guild_id exclusively.

[ ] Remove any user_id-based premium gating or mixed logic.

[ ] Confirm no shared/global variables exist for SFTP/premium handlers.

[ ] Simulate multi-guild calls to verify isolation.


Deliverable: Certified multi-guild-safe and premium-gated command architecture.


---

[6] Fix Discipline and Integration Plan

Problem: No temporary fixes allowed (Rule #6, Rule #10).
Action Items:

[ ] Each fix must be a full, root-cause solution.

[ ] All fixes must be applied in a single, integrated commit per issue group.

[ ] No fix scripts, no monkey patches, no global overrides.


Deliverable: Modular, test-covered fix batches committed by subsystem with internal audit logs.


---

Approval Requirements (Rule #11)

This plan must be approved in full before any <fix-start> phase may begin.

<plan-end>
---