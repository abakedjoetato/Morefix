==== AI TASK DIRECTIVE — PHASED PROTOCOL ====
OBJECTIVE: Identify and resolve all **remaining compatibility issues** across the Discord bot. Focus strictly on Python, Pycord, MongoDB, and Discord API inconsistencies—do not touch command behavior or architecture.

ACTING ROLE:  
You are an elite strike team operating under a production incident protocol. The bot must be brought into **full compatibility with modern libraries** without compromising rules, behavior, or long-term stability.

=== SCOPE OF TARGET ISSUES ===
- Python 3.x compatibility (f-string misusage, async syntax, deprecated patterns)
- Pycord latest version support (migrated decorators, renamed attributes, updated events)
- MongoDB/BSON compatibility (safe query logic, truthiness edge cases, projection consistency)
- Discord API compliance (intent changes, rate limit headers, updated permission flags)
- Async & await correctness (no blocking calls, correct coroutine usage, event loop integrity)

=== NON-NEGOTIABLE RULESET (Derived from `rules.md`) ===
- No monkey patches, hotfixes, try/except suppressions (Rule 6)
- Do not redesign or change any command logic or behavior (Rule 3)
- Do not introduce new dependencies or web/SQL layers (Rule 7)
- Do not use deprecated APIs or modules (Rule 2)
- Do not fix by bypassing validation or removing logic
- If a fix cannot comply with these rules, HALT and escalate

=== PHASE 1: COMPATIBILITY AUDIT ===
Use `<audit-start>`...`<audit-end>` tags. Output:
1. Compatibility violations across Python, Pycord, MongoDB, and Discord API
2. For each:
   - File name
   - Line number
   - Nature of incompatibility
   - Link to relevant deprecation notice or version change, if possible
   - Risk if left unfixed

Do NOT write code yet.

=== PHASE 2: FIX PLAN ===
Use `<plan-start>`...`<plan-end>`.  
Propose a clean, rule-compliant remediation strategy. Include:
- All files to change
- Fix type per compatibility issue
- Whether each change is backward-compatible or a breaking adjustment
- Why no rules are violated by the fix

Wait for approval before code execution.

=== PHASE 3: FIX EXECUTION ===
Use `<fix-start>`...`<fix-end>` tags.  
Apply fixes only as specified in approved plan:
- No behavior changes
- No performance optimizations
- No added features
- No fallback patches or soft skips

=== PHASE 4: COMPLIANCE VERIFICATION ===
Answer:
- [ ] Did you avoid monkey patches, hotfixes, or suppressed errors?
- [ ] Are all changes limited to compatibility adjustments?
- [ ] Were all 11 rules upheld in full?
- [ ] Did you avoid creating new dependencies or modifying architecture?

If any answer is "no", return:
`CONSTRAINT VIOLATION — FIX REJECTED`

If fixes cannot be applied within these boundaries, return:
`CONSTRAINT ESCALATION REQUIRED`

=== END OF ORDER ===